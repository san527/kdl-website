<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:mvc="http://www.springframework.org/schema/mvc" 			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xmlns:beans="http://www.springframework.org/schema/beans"		xmlns:context="http://www.springframework.org/schema/context"
			 xmlns:aop="http://www.springframework.org/schema/aop"			xmlns:tx="http://www.springframework.org/schema/tx"
			 xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
								 http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
								 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
								 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
								 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

	<!-- 스프링 빈을 태그로 등록하지 않고 자동으로 검색(auto scan) -->
	<context:component-scan base-package="com.kdl.daimul" />

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving	up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적 리소스(js, css, 이미지 등) 매핑 -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	<!-- 매핑되지 않은 요청(주로 정적 리소스)은 웹 컨테이너(Tomcat 등)의 기본 서블릿(DefaultServlet)으로 전달(위임).
		Spring MVC는 기본적으로 모든 요청을 DispatcherServlet으로 처리. 
		이 설정이 없으면 정적 리소스 요청도 Spring MVC에서 처리하려고 시도하므로 404 에러가 발생할 수 있음. -->
	<mvc:default-servlet-handler/>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean	class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 파일 업로드 관련 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 파일업로드 최대 용량(byte) -->
		<beans:property name="maxUploadSize" value="10485760" />
	</beans:bean>
	<!-- 파일업로드를 위한 디렉토리 설정 -->
	<!-- String uploadPath=new String("d:/upload"); -->
	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg value="d:/upload" />
	</beans:bean>

<!-- aop의 설정으로 Proxy 객체를 자동으로 생성 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

<!-- 인터셉터 빈을 등록 -->
	<!-- <beans:bean id="sampleInterceptor" class="com.example.spring02.interceptor.SampleInterceptor">
	</beans:bean>
	<beans:bean id="loginInterceptor" class="com.example.spring02.interceptor.LoginInterceptor">
	</beans:bean>
	<beans:bean id="adminInterceptor" class="com.example.spring02.interceptor.AdminInterceptor" /> -->

<!-- 인터셉터 호출을 위한 url mapping -->
	<!-- <interceptors>
		<interceptor>
			<mapping path="/shop/**" />
			<beans:ref bean="sampleInterceptor" />
		</interceptor>
		<interceptor>
			<mapping path="/board/write.do" />
			<mapping path="/board/insert.do" />
			<mapping path="/board/update.do" />
			<mapping path="/board/delete.do" />
			<mapping path="/shop/cart/list.do"/>
			<mapping path="/shop/cart/insert.do"/>
			<beans:ref bean="loginInterceptor"/>
		</interceptor>
		<interceptor>
			<mapping path="/pdf/list.do"/>
			<mapping path="/shop/product/write.do"/>
			<mapping path="/shop/product/insert.do"/>
			<mapping path="/chart/**" />
			<mapping path="/jchart/**" />
			<beans:ref bean="adminInterceptor" />
		</interceptor>
	</interceptors> -->


</beans:beans>